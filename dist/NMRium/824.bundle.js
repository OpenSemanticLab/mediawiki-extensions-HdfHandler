"use strict";(self.webpackChunkreact_webpack=self.webpackChunkreact_webpack||[]).push([[824],{6824:(e,t,n)=>{n.r(t),n.d(t,{ClipboardItem:()=>J,read:()=>Y,readText:()=>G,setDebugLog:()=>l,suppressWarnings:()=>d,write:()=>X,writeText:()=>q});var r="text/plain",o="text/html",i=e=>{};function a(e){i(e)}function l(e){i=e}var u=!0;function d(){u=!1}(function(){(console.warn||console.log).apply(console,arguments)}).bind("[clipboard-polyfill]");var c,s,p,v,f,w,m,b,y="undefined"==typeof window?void 0:window,g="undefined"==typeof globalThis?void 0:globalThis,h=null!=(p=null==(c=y)?void 0:c.Promise)?p:null==(s=g)?void 0:s.Promise,x="undefined"==typeof navigator?void 0:navigator,T=null==x?void 0:x.clipboard,E=null==(v=null==T?void 0:T.read)?void 0:v.bind(T),C=null==(f=null==T?void 0:T.readText)?void 0:f.bind(T),D=null==(w=null==T?void 0:T.write)?void 0:w.bind(T),k=null==(m=null==T?void 0:T.writeText)?void 0:m.bind(T),S=null==(b=y)?void 0:b.ClipboardItem,U=function(){if(!h)throw new Error("No `Promise` implementation available for `clipboard-polyfill`. Consider using: https://github.com/lgarron/clipboard-polyfill#flat-file-version-with-promise-included");return h}(),A=y;function O(){return"undefined"==typeof ClipboardEvent&&void 0!==(null==A?void 0:A.clipboardData)&&void 0!==(null==A?void 0:A.clipboardData.setData)}function R(e,t,n){for(var o in a("listener called"),e.success=!0,t){var i=t[o],l=n.clipboardData;l.setData(o,i),o===r&&l.getData(o)!==i&&(a("setting text/plain failed"),e.success=!1)}n.preventDefault()}function L(e){var t={success:!1},n=R.bind(this,t,e);document.addEventListener("copy",n);try{document.execCommand("copy")}finally{document.removeEventListener("copy",n)}return t.success}function I(e,t){M(e);var n=L(t);return N(),n}function M(e){var t=document.getSelection();if(t){var n=document.createRange();n.selectNodeContents(e),t.removeAllRanges(),t.addRange(n)}}function N(){var e=document.getSelection();e&&e.removeAllRanges()}function P(e){var t,n,o=r in e;if(O()){if(!o)throw new Error("No `text/plain` value was specified.");if(t=e[r],(n=A.clipboardData.setData("Text",t))&&a("writeTextIE worked"),n)return!0;throw new Error("Copying failed, possibly because the user rejected it.")}return L(e)?(a("regular execCopy worked"),!0):navigator.userAgent.indexOf("Edge")>-1?(a('UA "Edge" => assuming success'),!0):I(document.body,e)?(a("copyUsingTempSelection worked"),!0):function(e){var t=document.createElement("div");t.setAttribute("style","-webkit-user-select: text !important"),t.textContent="temporary element",document.body.appendChild(t);var n=I(t,e);return document.body.removeChild(t),n}(e)?(a("copyUsingTempElem worked"),!0):!!function(e){a("copyTextUsingDOM");var t=document.createElement("div");t.setAttribute("style","-webkit-user-select: text !important");var n=t;t.attachShadow&&(a("Using shadow DOM."),n=t.attachShadow({mode:"open"}));var r=document.createElement("span");r.innerText=e,n.appendChild(r),document.body.appendChild(t),M(r);var o=document.execCommand("copy");return N(),document.body.removeChild(t),o}(e[r])&&(a("copyTextUsingDOM worked"),!0)}function j(e,t){var n=[];for(var r in e){var o=e[r];n.push(t(o))}return U.all(n).then((t=>{for(var n={},r=0;r<e.length;r++)n[e[r]]=t[r];return n}))}var W=U.resolve(),_=()=>U.resolve(!0),B=U.resolve(!1);function F(e){return new U(((t,n)=>{try{t(e())}catch(e){n(e)}}))}function q(e){return F((()=>k?(a("Using `navigator.clipboard.writeText()`."),k(e).catch(z)):U.resolve(z(e))))}function z(e){if(!P(function(e){var t={};return t[r]=e,t}(e)))throw new Error("writeText() failed")}function G(){return F((()=>{if(C)return a("Using `navigator.clipboard.readText()`."),C();if(O()){var e=function(){var e=A.clipboardData.getData("Text");if(""===e)throw new Error("Empty clipboard or could not read plain text from clipboard");return e}();return U.resolve(e)}throw new Error("Read is not supported in your browser.")}))}function H(e,t){for(var n in e)if(-1!==e[n].types.indexOf(t))return!0;return!1}var J=function(e,t){var n,r=Object.keys(e),o={};for(var i in e){var a=e[i];o[i]="string"==typeof a?K(i,a):a}return{types:r,presentationStyle:null!=(n=null==t?void 0:t.presentationStyle)?n:"unspecified",getType:function(e){return U.resolve(o[e])}}};function K(e,t){return new Blob([t],{type:e})}function Q(e){return j(e.types,(function(t){return e.getType(t)})).then((t=>{var n={};return e.presentationStyle&&(n.presentationStyle=e.presentationStyle),new S(t,n)}))}function V(e){var t={};return t[r]=K(e,r),new J(t)}function X(e){return F((()=>{if(D&&S){var t=D;return a("Using `navigator.clipboard.write()`."),U.all(e.map(Q)).then((n=>t(n).then(_).catch((t=>{if(!H(e,r)&&!H(e,o))throw t;return B}))))}return B})).then((t=>{if(t)return W;var n=H(e,r);return u&&!n&&a("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call suppressWarnings() to suppress this warning."),function(e){return j(e.types,(function(t){return function(e,t){return e.getType(t).then((e=>{return t=e,new U(((e,n)=>{var r=new FileReader;r.addEventListener("load",(()=>{var t=r.result;"string"==typeof t?e(t):n("could not convert blob to string")})),r.readAsText(t)}));var t}))}(e,t)}))}(e[0]).then((e=>{if(!P(e))throw new Error("write() failed")}))}))}function Y(){return F((()=>E?(a("Using `navigator.clipboard.read()`."),E()):G().then((e=>[V(e)]))))}}}]);